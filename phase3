Phase 3

1. Setting breakpoint and using "test" as random input: 

(gdb) b phase_3
Breakpoint 1 at 0x400f0d
(gdb) run
Starting program: /home/lhashing/Desktop/Assignment 1/bomb002/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
test

Breakpoint 1, 0x0000000000400f0d in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f0d <+0>:	sub    $0x18,%rsp     //makes stack 24 bytes
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi   //What are we moving from 0x4027a5?
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>   //function that takes input
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax                        //comparing 1 with result from input
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>            //if %eax > 1 then jump pass explode bomb
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)                       //comparing 7 with value at 0xc(%rsp)
   0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>             //jump to bomb if above 7
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)               //this is a jump table
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax          //compares $rsp+4 to $eax == %eax holds the answer!
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp      //closes stack frame
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.

2. Moving the pointer to <+28> to figure out what 0x4025b7 is:

(gdb) x/s 0x4025b7
0x4025b7:	"%d %d"

3. Lets also figure out what (%rsp) holds when pointer is at this instruction:  
0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)

(gdb) x/d $rsp
0x7fffffffde78:	45

4. Lets input "8 34"

(gdb) b phase_3
Breakpoint 1 at 0x400f0d
(gdb) run
Starting program: /home/lhashing/Desktop/Assignment 1/bomb002/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
8 34

Breakpoint 1, 0x0000000000400f0d in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.
(gdb) u* 0x0000000000400f41
0x0000000000400f41 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)
=> 0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>   //This will jump to bomb!!
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.

5. 8 will call the bomb! It looks like we are comparing our first digit. We want it to be greater than one, but less than 7. So lets try "2 35".

(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
=> 0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.
(gdb) i r
rax            0x1ea               490
rbx            0x7fffffffdf58      140737488346968
rcx            0x0                 0
rdx            0x7fffffffde44      140737488346692
rsi            0x0                 0
rdi            0x7fffffffd7f0      140737488345072
rbp            0x0                 0x0
rsp            0x7fffffffde40      0x7fffffffde40
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f62ac0      140737353493184
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf50      140737488346960
r14            0x0                 0
r15            0x0                 0
rip            0x400fb2            0x400fb2 <phase_3+165>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0

6. As we can see, our digit of 2 gets us pass that first requirement of the digit being between 1 and 7. Now we see that we are comparing
%rax to 0x4(%rsp). Lets see whats in %rsp+4:

(gdb) x/d $rsp+4
0x7fffffffde44:	35

7. It's our second digit! So it seems after the jump over the first bomb, we are comparing our second digit in the stack to a value our 
switch table jumps to. 
Since we want our second digit to be 490, lets try it with an input of "2 490" :

(gdb) r phase.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/lhashing/Desktop/Assignment 1/bomb002/bomb phase.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
2 490

Breakpoint 1, 0x0000000000400f0d in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.
(gdb) u* 0x0000000000400fd2
main (argc=<optimized out>, argv=<optimized out>) at bomb.c:90
90	    phase_defused();

8. Conclusion: We can get different possible answers depending on what we put as our first digit (between 1-7). Depending on the first digit,
the jump table will indirectly jump to the correct second digit.

The solution is "2 490".




